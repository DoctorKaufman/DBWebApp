document.addEventListener('alpine:init', () => {
    Alpine.data('tableInteractions', (currentTab, items, columns, keyColumn) => ({
        // #region initializations
        items: items,
        tableState: null,
        rawColumns: columns,
        fields: Object.entries(columns).map(([key, value]) => ({ [key]: value })),

        init() {
            this.$store.tableState.currentTab = currentTab;
            this.$store.tableState.initializeRows(items);
            this.$store.tableState.columns = this.rawColumns;
            this.$store.tableState.fields = this.fields;
            this.$store.tableState.keyColumn = keyColumn;
            this.$store.currentFilters = {
                searchColumn: null,
                searchValue: null,
            },

            this.tableState = this.$store.tableState.globalState;

            this.$watch('Alpine.store("tableState").globalState', (newState) => {
                this.tableState = newState;

                console.log('Global state changed to:', this.tableState);
            });
        },
        // #endregion

        // #region row creation
        createRowForm() {
            
            const table = document.querySelector(".table-body");
            const row = document.createElement("tr"); 
            row.className = `bg-white border-b dark:bg-gray-800 dark:border-gray-700`; 
            row.id = 'row-creation-form';

            const fieldsJson = JSON.stringify(this.fields);
            row.setAttribute('x-data', `createRow(${fieldsJson})`);

            
            let innerHTML = '';

            this.fields.forEach(fieldObject => {
                const fieldName = Object.keys(fieldObject)[0]; 
                if (fieldObject[fieldName] === 'PK') {
                    innerHTML += `<td class="px-6 py-4">
                                    <span>${fieldName} is autogenerated</span>
                                </td>`;
                } else if (fieldObject[fieldName] === 'FK') {
                    innerHTML += `<td class="px-6 py-4">
                    <div x-data="dropdownComponent('${fieldName}')" class="relative group">
                    <button @click="toggleDropdown" 
                    class="inline-flex justify-center w-full h-full text-sm font-medium text-gray-700 
                    bg-gray-50 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:border-blue-500 
                    focus:ring-blue-500 p-2.5 dark:bg-gray-700 dark:border-gray-600 
                    dark:placeholder-gray-400 dark:text-white dark:focus:ring-cyan-500 dark:focus:border-cyan-500">
                    <span x-text="selectedOption != null ? 
                                    ('${fieldName}'=='UPC Prom'? Object.keys(selectedOption)[0] : Object.values(selectedOption)[0]) : 'Select'"></span>
                    <svg class="w-5 h-5 ml-2 -mr-1" fill="currentColor" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20">
                        <path fill-rule="evenodd" d="M6.293 9.293a1 1 0 011.414 0L10 11.586l2.293-2.293a1 1 0 111.414 1.414l-3 3a1 1 0 01-1.414 0l-3-3a1 1 0 010-1.414z" clip-rule="evenodd" />
                    </svg>
                    </button>
                    <div x-show="isOpen" @click.away="isOpen = false"
                    class="absolute right-0 mt-2ring-1 ring-black ring-opacity-5 p-1 space-y-1 z-10 bg-white 
                    divide-y divide-gray-100 dark:divide-gray-600 rounded-lg shadow dark:bg-gray-700 block">
                    <input x-model="searchTerm" class="bg-gray-50 border border-gray-300 text-gray-900 
                    text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 
                    dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white 
                    dark:focus:ring-cyan-500 dark:focus:border-cyan-500" placeholder="Search items" autocomplete="off">
                    <div class="overflow-auto max-h-40 custom-scrollbar">
                        <template x-for="option in filteredOptions()" :key="Object.keys(option)[0]">
                            <a @click="selectOption(option)" href="javascript:void(0);" class="px-4 py-2 text-gray-700 dark:text-white 
                            cursor-pointer rounded-md inline-flex w-full hover:bg-gray-100 dark:hover:bg-gray-600 
                            dark:hover:text-white">
                                <span x-text="'${fieldName}'=='UPC Prom'? Object.keys(option)[0] : Object.values(option)[0]"></span>
                            </a>
                        </template>
                    </div>
                    </div>
                  </div>
                  </td>`;
                } else if (fieldObject[fieldName] === 'ATTRIB') {
                    innerHTML += `<td class="px-6 py-4">
                                    <input type="text" id="${fieldName}"
                                    class="bg-gray-50 border border-gray-300 text-gray-900 
                                    text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 
                                    block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 
                                    dark:placeholder-gray-400 dark:text-white 
                                    dark:focus:ring-cyan-500 dark:focus:border-cyan-500" 
                                    placeholder="${fieldName}"/>
                                </td>`;
                }
            });

            innerHTML += `<td class="px-6 py-4 text-right max-w-16">
                            <div class="flex flex-row gap-4 justify-center">
                                <button @click="saveCreatedRow()" class="font-medium text-sky-600 dark:text-cyan-500 hover:underline">
                                    <span>Save</span>
                                </button>
                                <button @click="cancelCreatingRow()" class="font-medium text-red-600 dark:text-gray-400 hover:underline">
                                    <span>Cancel</span>
                                </button>
                            </div>
                        </td>`;

            row.innerHTML = innerHTML;

            const firstRow = table.firstChild;
            table.insertBefore(row, firstRow);
        },
        // #endregion

    }));
});