document.addEventListener('alpine:init', () => {

    Alpine.data('headerManipulations', (currentTab, items, columns) => ({
        // #region initializations
        items: items,
        tableState: null,
        fields: Object.entries(columns).map(([key, value]) => ({ [key]: value })),

        init() {
            this.$store.tableState.currentTab = currentTab;

            this.tableState = this.$store.tableState.globalState;

            this.$watch('Alpine.store("tableState").globalState', (newState) => {
                this.tableState = newState;

                console.log('Global state changed to:', this.tableState);
            });
        },
        // #endregion

        // #region row creation
        createRowForm() {
            const table = document.querySelector(".table-body");
            const row = document.createElement("tr"); 
            row.className = `bg-white border-b dark:bg-gray-800 dark:border-gray-700`; 
            row.id = 'row-creation-form';
            
            const fieldsJson = JSON.stringify(this.fields);
            row.setAttribute('x-data', `createRow(${fieldsJson})`);

            
            let innerHTML = '';

            this.fields.forEach(fieldObject => {
                const fieldName = Object.keys(fieldObject)[0]; 
                const inputRequired = fieldObject[fieldName];
        
                if (inputRequired) {
                    innerHTML += `<td class="px-6 py-4">
                                    <input type="text" id="${fieldName}"
                                    class="bg-gray-50 border border-gray-300 text-gray-900 
                                    text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 
                                    block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 
                                    dark:placeholder-gray-400 dark:text-white 
                                    dark:focus:ring-cyan-500 dark:focus:border-cyan-500" 
                                    placeholder="${fieldName}"/>
                                </td>`;
                } else {
                    innerHTML += `<td class="px-6 py-4">
                                    <span>${fieldName} is autogenerated</span>
                                </td>`;
                }
            });

            innerHTML += `<td class="px-6 py-4 text-right max-w-16">
                            <div class="flex flex-row gap-4 justify-center">
                                <button @click="saveCreatedRow()" class="font-medium text-sky-600 dark:text-cyan-500 hover:underline">
                                    <span>Save</span>
                                </button>
                                <button @click="cancelCreatingRow()" class="font-medium text-red-600 dark:text-gray-400 hover:underline">
                                    <span>Cancel</span>
                                </button>
                            </div>
                        </td>`;

            row.innerHTML = innerHTML;

            const firstRow = table.firstChild;
            table.insertBefore(row, firstRow);
        },
        // #endregion

        // #region managing states
        startSelecting() {
            this.$store.tableState.startSelecting();
            console.log(this.$store.tableState.globalState)
        },

        stopSelecting() {
            this.$store.tableState.stopSelecting();
        },
        // #endregion
        
        // #region category management
        sendRequest(action, url, data = null) {
            // Configure the request options based on the action
            const options = {
                method: action,
                url: url,
            };
        
            // If the action requires data (e.g., POST), include it in the request
            if (['post', 'put', 'patch'].includes(action.toLowerCase()) && data) {
                options.data = data;
            }
        
            // Make the request using axios and return the Promise
            return axios(options)
                .then(response => {
                    console.log(`${action.toUpperCase()} request to ${url} successful:`, response.data);
                    return response.data; // Resolve the promise with the response data
                })
                .catch(error => {
                    console.error(`${action.toUpperCase()} request to ${url} failed:`, error);
                    throw error; // Reject the promise with the error
                });
        },
        
        // Usage example for adding a category
        addCategory() {
            console.log('Adding a new category');
            this.createRowForm();

        },

        removeCategory() {
            const categoryId = 'abc';//event.target.getAttribute('data-id');
            axios.delete(`http://127.0.0.1:5000/category/${categoryId}/`)
                .then(response => {
                    console.log('Category deleted:', response.data);
                })
                .catch(error => {
                    console.error('Error deleting category:', error);
                    createToast("error", `Error deleting category: ${categoryId}`);
                });
        },
        // #endregion

        addProduct() {
            console.log('Adding a new product');
            const data = {/* placeholder for product data */};
            axios.post('http://127.0.0.1:5000/product/', data)
                .then(response => {
                    console.log('Product added successfully:', response.data);
                    // Handle success
                })
                .catch(error => {
                    console.error('Error adding product:', error);
                    // Handle error
                });
            this.createRowForm();
        },

        removeProduct() {
            const productId = 'abc'; //event.target.getAttribute('data-id');
            axios.delete(`http://127.0.0.1:5000/product/${productId}/`)
                .then(response => {
                    console.log('Product deleted:', response.data);
                })
                .catch(error => {
                    console.error('Error deleting product:', error);
                    createToast("error", `Error deleting product: ${productId}`);
                });
        },
    }));
});